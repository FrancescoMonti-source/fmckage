}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var)) %>% bind_rows
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- sapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var))
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var))
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var)) %>% bind_rows(id = "var")
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
library(dplyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var)) %>% bind_rows(,.id = "var")
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var)) %>% bind_rows(.,id = "var")
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
library(dplyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var)) %>% bind_rows(.id = "var")
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var))
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
library(tidyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
mutate(Variable = column)
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
mutate(Variable = column)
}
# Apply the helper function to each column and combine results
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var))
combined_result <- bind_rows(result)
return(combined_result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
library(tidyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_by_group, freq_abs, !!sym(group_var))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_abs)
}
# Apply the helper function to each column and combine results
result <- lapply(columns, function(col) {
freqs <- calculate_frequencies_for_column(data, col, group_var)
freqs %>%
mutate(Variable = col)
})
combined_result <- bind_rows(result)
return(combined_result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
library(tidyr)
calculate_frequencies <- function(data, vars, group_vars = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_vars) {
if (!is.null(group_vars)) {
data %>%
group_by(across(all_of(group_vars))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_by_group, freq_abs, !!sym(group_vars))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_abs)
}
# Apply the helper function to each column and combine results
result <- lapply(vars, function(col) {
freqs <- calculate_frequencies_for_column(data, col, group_vars)
freqs %>%
mutate(Variable = col)
})
combined_result <- bind_rows(result)
return(combined_result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# vars of interest
vars <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, vars, group_vars = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, vars)
print(result_without_group)
library(dplyr)
library(tidyr)
ffreq <- function(data, vars, group_vars = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_vars) {
if (!is.null(group_vars)) {
data %>%
group_by(across(all_of(group_vars))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_by_group, freq_abs, !!sym(group_vars))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_abs)
}
# Apply the helper function to each column and combine results
result <- lapply(vars, function(col) {
freqs <- calculate_frequencies_for_column(data, col, group_vars)
freqs %>%
mutate(Variable = col)
})
combined_result <- bind_rows(result)
return(combined_result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# vars of interest
vars <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- ffreq(data, vars, group_vars = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- ffreq(data, vars)
print(result_without_group)
library(fmckage)
devtools::document()
library(fmckage)
200/17
(200/17)*7
library(fmckage)
fix_colnames
library(fmckage)
?pmin
library(fmckage)
export_package_functions("fmckage")
export_package_functions("fmckage", path = "C:\\Users\\francesco.monti\\Downloads\\fmckage.R")
export_package_functions("fmckage","C:\\Users\\francesco.monti\\Downloads\\fmckage.R")
library(fmckage)
library(lubridate)
library(fmckage)
(20000 / (20000 + 16635)) * 100
(16000 / (16000 + 16635)) * 100
# Continue with processing specific to bio data
clean_data %>%
select(PATID,EVTID,ELTID, PATBD, PATAGE, PATSEX, DATEXAM, SEJUM, SEJUF, contains("RESULT")) %>%
pivot_longer(
cols = c(contains("TYPEANA"), contains("NUMRES"), contains("STRRES"), contains("LOINC"), contains("CR"), contains("CMT")),
names_to = c(".value"),
names_pattern = "(TYPEANA|NUMRES|STRRES|LOINC|CR|CMT).*",
values_drop_na = TRUE
) %>%
distinct()
library(tidyverse)
# Continue with processing specific to bio data
clean_data %>%
select(PATID,EVTID,ELTID, PATBD, PATAGE, PATSEX, DATEXAM, SEJUM, SEJUF, contains("RESULT")) %>%
pivot_longer(
cols = c(contains("TYPEANA"), contains("NUMRES"), contains("STRRES"), contains("LOINC"), contains("CR"), contains("CMT")),
names_to = c(".value"),
names_pattern = "(TYPEANA|NUMRES|STRRES|LOINC|CR|CMT).*",
values_drop_na = TRUE
) %>%
distinct()
# Install package if needed
install.packages("sdcMicro")
# Load the library
library(sdcMicro)
# Example dataset (replace with your own data)
data <- data.frame(
Age = c(34, 35, 36, 37, 38, 39),
Gender = c("M", "F", "M", "F", "M", "F"),
ZipCode = c("75001", "75002", "75003", "75004", "75005", "75006")
)
# Define the quasi-identifiers
quasi_identifiers <- c("Age", "Gender", "ZipCode")
# Create an sdcMicro object
sdc <- createSdcObj(dat = data, keyVars = quasi_identifiers)
# Check k-anonymity
print(sdc@risk$individual)
data
data <- data.frame(
Age = c(34, 35, 36, 35, 35, 39),
Gender = c("M", "F", "M", "F", "M", "F"),
ZipCode = c("75002", "75002", "75003", "75004", "75005", "75006")
)
createSdcObj(dat = data, keyVars = quasi_identifiers)
data
data <- data.frame(
Age = c(34, 34, 36, 35, 35, 39),
Gender = c("M", "F", "M", "F", "M", "F"),
ZipCode = c("75002", "75002", "75003", "75004", "75005", "75006")
)
createSdcObj(dat = data, keyVars = quasi_identifiers)
data <- data.frame(
Age = c(34, 34, 36, 35, 35, 39),
Gender = c("M", "M", "M", "F", "M", "F"),
ZipCode = c("75002", "75002", "75003", "75004", "75005", "75006")
)
createSdcObj(dat = data, keyVars = quasi_identifiers)
createSdcObj
starwars %>% count(species)
v <-c(dt, dt + 100, dt + 1000); int_diff(v)
dt
dt <- as_datetime(1511870400)
v <-c(dt, dt + 100, dt + 1000); int_diff(v)
library(ggplot2)
library(openxlsx)
