} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var)) %>% bind_rows(.id = "var")
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2))
}
# Apply the helper function to each column
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var))
# Set names for the list elements
names(result) <- columns
return(result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
library(tidyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
mutate(Variable = column)
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
mutate(Variable = column)
}
# Apply the helper function to each column and combine results
result <- lapply(columns, function(col) calculate_frequencies_for_column(data, col, group_var))
combined_result <- bind_rows(result)
return(combined_result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
library(tidyr)
calculate_frequencies <- function(data, columns, group_var = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_var) {
if (!is.null(group_var)) {
data %>%
group_by(across(all_of(group_var))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_by_group, freq_abs, !!sym(group_var))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_abs)
}
# Apply the helper function to each column and combine results
result <- lapply(columns, function(col) {
freqs <- calculate_frequencies_for_column(data, col, group_var)
freqs %>%
mutate(Variable = col)
})
combined_result <- bind_rows(result)
return(combined_result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# Columns of interest
columns <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, columns, group_var = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, columns)
print(result_without_group)
library(dplyr)
library(tidyr)
calculate_frequencies <- function(data, vars, group_vars = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_vars) {
if (!is.null(group_vars)) {
data %>%
group_by(across(all_of(group_vars))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_by_group, freq_abs, !!sym(group_vars))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_abs)
}
# Apply the helper function to each column and combine results
result <- lapply(vars, function(col) {
freqs <- calculate_frequencies_for_column(data, col, group_vars)
freqs %>%
mutate(Variable = col)
})
combined_result <- bind_rows(result)
return(combined_result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# vars of interest
vars <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- calculate_frequencies(data, vars, group_vars = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- calculate_frequencies(data, vars)
print(result_without_group)
library(dplyr)
library(tidyr)
ffreq <- function(data, vars, group_vars = NULL) {
# Helper function to calculate frequencies for a single column
calculate_frequencies_for_column <- function(data, column, group_vars) {
if (!is.null(group_vars)) {
data %>%
group_by(across(all_of(group_vars))) %>%
count(!!sym(column)) %>%
mutate(freq_by_group = round(n * 100 / sum(n), 2)) %>%
ungroup() %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_by_group, freq_abs, !!sym(group_vars))
} else {
data %>%
count(!!sym(column)) %>%
mutate(freq_abs = round(n * 100 / sum(n), 2)) %>%
select(Variable = !!sym(column), n, freq_abs)
}
# Apply the helper function to each column and combine results
result <- lapply(vars, function(col) {
freqs <- calculate_frequencies_for_column(data, col, group_vars)
freqs %>%
mutate(Variable = col)
})
combined_result <- bind_rows(result)
return(combined_result)
}
# Example usage
data <- tibble(
PATSEX = rep(c("F", "M"), each = 10),
migration_lithiasique = sample(c("Yes", "No"), 20, replace = TRUE),
anticoagulants = sample(c("Yes", "No"), 20, replace = TRUE)
)
# vars of interest
vars <- c("migration_lithiasique", "anticoagulants")
# With grouping variable
result_with_group <- ffreq(data, vars, group_vars = "PATSEX")
print(result_with_group)
# Without grouping variable
result_without_group <- ffreq(data, vars)
print(result_without_group)
library(fmckage)
devtools::document()
library(fmckage)
200/17
(200/17)*7
library(fmckage)
fix_colnames
library(fmckage)
?pmin
library(fmckage)
export_package_functions("fmckage")
export_package_functions("fmckage", path = "C:\\Users\\francesco.monti\\Downloads\\fmckage.R")
export_package_functions("fmckage","C:\\Users\\francesco.monti\\Downloads\\fmckage.R")
library(fmckage)
library(lubridate)
library(fmckage)
(20000 / (20000 + 16635)) * 100
(16000 / (16000 + 16635)) * 100
# Continue with processing specific to bio data
clean_data %>%
select(PATID,EVTID,ELTID, PATBD, PATAGE, PATSEX, DATEXAM, SEJUM, SEJUF, contains("RESULT")) %>%
pivot_longer(
cols = c(contains("TYPEANA"), contains("NUMRES"), contains("STRRES"), contains("LOINC"), contains("CR"), contains("CMT")),
names_to = c(".value"),
names_pattern = "(TYPEANA|NUMRES|STRRES|LOINC|CR|CMT).*",
values_drop_na = TRUE
) %>%
distinct()
library(tidyverse)
# Continue with processing specific to bio data
clean_data %>%
select(PATID,EVTID,ELTID, PATBD, PATAGE, PATSEX, DATEXAM, SEJUM, SEJUF, contains("RESULT")) %>%
pivot_longer(
cols = c(contains("TYPEANA"), contains("NUMRES"), contains("STRRES"), contains("LOINC"), contains("CR"), contains("CMT")),
names_to = c(".value"),
names_pattern = "(TYPEANA|NUMRES|STRRES|LOINC|CR|CMT).*",
values_drop_na = TRUE
) %>%
distinct()
# Install package if needed
install.packages("sdcMicro")
# Load the library
library(sdcMicro)
# Example dataset (replace with your own data)
data <- data.frame(
Age = c(34, 35, 36, 37, 38, 39),
Gender = c("M", "F", "M", "F", "M", "F"),
ZipCode = c("75001", "75002", "75003", "75004", "75005", "75006")
)
# Define the quasi-identifiers
quasi_identifiers <- c("Age", "Gender", "ZipCode")
# Create an sdcMicro object
sdc <- createSdcObj(dat = data, keyVars = quasi_identifiers)
# Check k-anonymity
print(sdc@risk$individual)
data
data <- data.frame(
Age = c(34, 35, 36, 35, 35, 39),
Gender = c("M", "F", "M", "F", "M", "F"),
ZipCode = c("75002", "75002", "75003", "75004", "75005", "75006")
)
createSdcObj(dat = data, keyVars = quasi_identifiers)
data
data <- data.frame(
Age = c(34, 34, 36, 35, 35, 39),
Gender = c("M", "F", "M", "F", "M", "F"),
ZipCode = c("75002", "75002", "75003", "75004", "75005", "75006")
)
createSdcObj(dat = data, keyVars = quasi_identifiers)
data <- data.frame(
Age = c(34, 34, 36, 35, 35, 39),
Gender = c("M", "M", "M", "F", "M", "F"),
ZipCode = c("75002", "75002", "75003", "75004", "75005", "75006")
)
createSdcObj(dat = data, keyVars = quasi_identifiers)
createSdcObj
starwars %>% count(species)
v <-c(dt, dt + 100, dt + 1000); int_diff(v)
dt
dt <- as_datetime(1511870400)
v <-c(dt, dt + 100, dt + 1000); int_diff(v)
library(ggplot2)
library(openxlsx)
#'
#' @return A character string containing the full URL to the icon image
#'   (e.g., `"https://wow.zamimg.com/images/wow/icons/large/spell_holy_penance.jpg"`),
#'   or `NA` if the icon could not be found or the request failed.
#'
#' @examples
#' wowhead_get_icon_from_spell_id(47540)
#' #> [1] "https://wow.zamimg.com/images/wow/icons/large/spell_holy_penance.jpg"
#'
#' @export
wowhead_get_icon_from_spell_id <- function(spell_id) {
url <- paste0("https://www.wowhead.com/spell=", spell_id)
resp <- tryCatch({
httr::GET(url, httr::add_headers(`User-Agent` = "Mozilla/5.0"))
}, error = function(e) {
message("❌ Error fetching spell ID ", spell_id, ": ", e$message)
return(NULL)
})
if (is.null(resp) || httr::http_error(resp)) {
message("❌ Failed to fetch spell ID: ", spell_id)
return(NA)
}
html <- httr::content(resp, "text", encoding = "UTF-8")
icon_line <- stringr::str_extract(html, '"iconFilename":"[^"]+')
if (is.na(icon_line)) {
message("⚠️ Icon not found for spell ID: ", spell_id)
return(NA)
}
icon_name <- stringr::str_remove(icon_line, '"iconFilename":"')
icon_url <- paste0("https://wow.zamimg.com/images/wow/icons/large/", icon_name, ".jpg")
return(icon_url)
}
wowhead_get_icon_from_spell_id(47540)
wowhead_get_icon_from_spell_id(474337)
library(devtools)
install_github("FrancescoMonti-source/fmckage")
library(tidyverse)
id
library(conflicted)    # Get a warning/error if several functions with the same name exist.
library(magrittr)      # Operator %>% and additional pipe-friendly functions.
library(tidyverse)     # The main "tidyverse" packages.
readRDS("C:/Users/francesco.monti/Downloads/df")
all_months <- seq(min(df$date), max(df$date), by = "1 month")
label_months <- all_months[seq(1, length(all_months), by = 2)]
p = df %>% ggplot(aes(x=date))+
geom_point(aes(y = nb_passages, color = group), size = 2) +
geom_line(aes(y = nb_passages), size = .5) +
scale_y_continuous(breaks = seq(0,200,10))+
scale_color_manual(values = c("cold" = "blue", "hot" = "red")) +
labs(x = "Date", y = "Count", color = "Legend") +
scale_x_date(
breaks = all_months,
labels = function(x) ifelse(x %in% label_months, format(x, "%b %Y"), "")
) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
all_months <- seq(min(df$date), max(df$date), by = "1 month")
df
df = readRDS("C:/Users/francesco.monti/Downloads/df")
all_months <- seq(min(df$date), max(df$date), by = "1 month")
label_months <- all_months[seq(1, length(all_months), by = 2)]
p = df %>% ggplot(aes(x=date))+
geom_point(aes(y = nb_passages, color = group), size = 2) +
geom_line(aes(y = nb_passages), size = .5) +
scale_y_continuous(breaks = seq(0,200,10))+
scale_color_manual(values = c("cold" = "blue", "hot" = "red")) +
labs(x = "Date", y = "Count", color = "Legend") +
scale_x_date(
breaks = all_months,
labels = function(x) ifelse(x %in% label_months, format(x, "%b %Y"), "")
) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
library(htmlwidgets)
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
library(plotly)
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
plotly
plotly = ggplotly(p, height = 400)
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
getwd()
setwd("C:/Users/francesco.monti/Downloads")
plotly = ggplotly(p, height = 800)
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
df
df %>% filter(date > "2010-01-01")
conflicted::conflicts_prefer(stats::filter)
df %>% filter(date > "2010-01-01")
df %>% filter(date > as_date("2010-01-01"))
df
df %>% filter(nb_passages == 1)
df %>% class
df %>% dplyr::filter(nb_passages == 1)
conflicted::conflicts_prefer(dplyr::filter)
df %>% filter(nb_passages == 1)
df %>% filter(date > as_date("2010-01-01"))
p = df %>%
filter(date > as_date("2010-01-01")) %>%
ggplot(aes(x=date))+
geom_point(aes(y = nb_passages, color = group), size = 2) +
geom_line(aes(y = nb_passages), size = .5) +
scale_y_continuous(breaks = seq(0,200,10))+
scale_color_manual(values = c("cold" = "blue", "hot" = "red")) +
labs(x = "Date", y = "Count", color = "Legend") +
scale_x_date(
breaks = all_months,
labels = function(x) ifelse(x %in% label_months, format(x, "%b %Y"), "")
) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plotly = ggplotly(p, height = 800)
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
p = df %>%
filter(date > as_date("2010-01-01")) %>%
ggplot(aes(x=date))+
geom_point(aes(y = nb_passages, color = group), size = 2) +
geom_line(aes(y = nb_passages), size = .5) +
scale_y_continuous(breaks = seq(0,200,10))+
scale_color_manual(values = c("cold" = "blue", "hot" = "red")) +
labs(x = "Date", y = "Count", color = "Legend") +
scale_x_date(
breaks = all_months,
labels = function(x) ifelse(x %in% label_months, format(x, "%b %Y"), "")
) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plotly = ggplotly(p, height = 800)
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
label_months <- all_months[seq(1, length(all_months), by = 6)]
p = df %>%
filter(date > as_date("2010-01-01")) %>%
ggplot(aes(x=date))+
geom_point(aes(y = nb_passages, color = group), size = 2) +
geom_line(aes(y = nb_passages), size = .5) +
scale_y_continuous(breaks = seq(0,200,10))+
scale_color_manual(values = c("cold" = "blue", "hot" = "red")) +
labs(x = "Date", y = "Count", color = "Legend") +
scale_x_date(
breaks = all_months,
labels = function(x) ifelse(x %in% label_months, format(x, "%b %Y"), "")
) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
plotly = ggplotly(p, height = 800)
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
plotly = ggplotly(p, height = 600)
saveWidget(plotly, "my_interactive_plot.html", selfcontained = TRUE)
getwd()
export_package_functions("fmckage","C:/Users/francesco.monti/Documents/fmckage.R")
135+120
120
135+120+120+26+10+10+10+9+10+19+12+10+109+14+45+14+40+5+16+8+11+9+5+7+24
3838+2700+480+600+700
0.18*1250
0.18*613
8300-3700
2.1/4200
round(2.1/4200,5)
round(2.1/4200,6)
round(2.1/4200,1)
round(2.1/4200,2)
round(2.1/4200,3)
round(2.1/4200,8)
round(200.1/4200,8)
round(200.1/4200,8)/100
280/48
280/38
280/35
280/15
280/20
2*6^2
2*6*6
2*2*3*2*3
2^3*6^2
2^3*3^2
6 * sqrt(2)
sqrt(72)
sqrt(15)
sqrt(20)
sqrt(300)
sqrt(20)*sqrt(15)
sqrt(39)
sqrt(21)
sqrt(45)
sqrt(19)
(3*sqrt(2))^2
sqrt(sqrt(4+9)^2+36)
sqrt(17^2-15^2)
sqrt(36+49)
sqrt(9+49)
sqrt(35-sqrt(5))
sqrt(34-sqrt(5))
sqrt(34-25
)
sqrt(15^2+6^2)
getwd()
export_package_functions("fmckage","C:/Users/francesco.monti/Documents/fmckage.R")
library(tidyverse)
28*7
2800/3800
3033/3813
1700+500+1350+939+900+550+85+99+250+99+99+99+120+120+68+240+80+150+1300+620+316+500+200+360+950+160+116+230+450
