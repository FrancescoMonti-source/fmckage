% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_in_sources.R
\name{find_in_sources}
\alias{find_in_sources}
\title{Grep through package sources}
\usage{
find_in_sources(
  pattern,
  dirs = c("R", "src", "inst"),
  include_ext = c("\\\\.R$", "\\\\.r$", "\\\\.Rmd$", "\\\\.Rnw$"),
  perl = TRUE
)
}
\arguments{
\item{pattern}{Character scalar. Regular expression to search for. Passed to
\code{\link[base:grep]{base::grepl()}} as \code{pattern}. Remember to double-escape backslashes in R
strings.}

\item{dirs}{Character vector of directories to search recursively.
Defaults to \code{c("R", "src", "inst")}.}

\item{include_ext}{Character vector of \strong{regular-expression} suffixes that
define which files to include (e.g. \code{"\\\\\\\\.R$"}, \code{"\\\\\\\\.Rmd$"}). The
entries are combined with \code{|} into a single pattern for \code{\link[base:list.files]{base::list.files()}}.}

\item{perl}{Logical; whether to use PCRE via \code{perl = TRUE} in \code{\link[base:grep]{base::grepl()}}.
Defaults to \code{TRUE}.}
}
\value{
Invisibly returns a \code{data.frame} with columns:
\describe{
\item{file}{File path (character).}
\item{line}{1-based line number (integer).}
\item{code}{Matched line, trimmed (character).}
}
If no matches are found, a message \code{"No matches."} is emitted and \code{NULL} is
returned invisibly.
}
\description{
Recursively search common package directories for files with selected
extensions and print lines that match a regular expression. Useful for
quickly locating symbols, TODOs, or API usage across \verb{R/}, \verb{src/}, and \verb{inst/}.
}
\details{
For each matching file, lines are read as UTF-8 and tested with
\code{\link[base:grep]{base::grepl()}}. Files that cannot be read are silently skipped. Each hit is
printed as \code{"path:line | code"} and also collected into a data frame that is
returned invisibly.
}
\examples{
\dontrun{
# Find all TODO markers anywhere under the default dirs
find_in_sources("TODO")

# Find where function 'foo' is defined/assigned
find_in_sources("^\\\\s*foo\\\\s*<-")

# Look for .Call usages in R/ and src/
find_in_sources("\\\\.Call\\\\(", dirs = c("R", "src"))

# Restrict search to R and Rmd files
find_in_sources("setClass\\\\(", include_ext = c("\\\\\\\\.R$", "\\\\\\\\.Rmd$"))
}

}
\seealso{
\code{\link[base:grep]{base::grepl()}}, \code{\link[base:list.files]{base::list.files()}}
}
