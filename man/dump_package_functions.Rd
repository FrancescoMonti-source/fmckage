% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/package_introspection.R
\name{dump_package_functions}
\alias{dump_package_functions}
\title{Dump / print / return package functions as source code}
\usage{
dump_package_functions(
  out = NULL,
  package = NULL,
  dir = NULL,
  only_exported = FALSE,
  include_internal = TRUE,
  pattern = NULL,
  dest = c("file", "console", "return")
)
}
\arguments{
\item{out}{Output path for the generated \code{.R} file (used only when
\code{dest = "file"}). Ignored for other \code{dest} values.}

\item{package}{Package name to dump from an installed/loaded namespace (installed mode).
Provide \emph{either} \code{package} or \code{dir}, not both.}

\item{dir}{Package root directory containing an \verb{R/} folder (source-tree mode).
Provide \emph{either} \code{dir} or \code{package}, not both.}

\item{only_exported}{Logical. If \code{TRUE}, include only exported functions
(\code{getNamespaceExports()} in installed mode; best-effort parse of \code{NAMESPACE}
in source-tree mode). Default \code{FALSE}.}

\item{include_internal}{Logical. If \code{TRUE}, also include non-exported functions
(ignored when \code{only_exported = TRUE}). Default \code{TRUE}.}

\item{pattern}{Optional regular expression; when provided, only function names matching
\code{pattern} are included.}

\item{dest}{One of \code{"file"}, \code{"console"}, or \code{"return"}.
Defaults to \code{"file"}.}
}
\value{
If \code{dest = "return"}, a named character vector where names are function names
and values are the corresponding source blocks.
If \code{dest = "console"}, prints to \code{stdout} and returns \code{NULL} (invisibly).
If \code{dest = "file"}, invisibly returns the normalized output path.
}
\description{
Collects top-level function definitions from either an \strong{installed/loaded}
package or a \strong{source tree}, then:
\itemize{
\item writes them to a single, sourceable \code{.R} file (\code{dest = "file"}),
\item prints them to the console (\code{dest = "console"}), or
\item returns them as a named character vector (\code{dest = "return"}).
}
}
\details{
Exactly one of \code{package} (installed/loaded mode) or \code{dir} (source-tree mode)
must be supplied.

\itemize{
\item Primitives (e.g., some base functions) cannot be dumped and are skipped.
\item In source-tree mode, only \emph{top-level} function assignments are collected
(e.g., \code{name <- function(...) \{\}} or \code{assign("name", function(...) \{\})}).
Functions defined inside other functions are not included.
\item The generated script may require you to \code{library()} any dependencies before
\code{source()}-ing; namespace registrations and compiled code are not replicated.
}
}
\section{Modes}{

\strong{Installed/loaded} (\verb{package=}): Functions are pulled from the package
namespace via \code{utils::dump()}. Formatting is readable. Namespace side-effects
(e.g., S3/S4 registration, compiled code, options) are \emph{not} reproduced.

\strong{Source tree} (\verb{dir=}): Functions are parsed from files under \verb{R/}
and emitted as they appear in source (using \code{srcref} when available). Best for
preserving original formatting and comments. Requires a package source directory.
}

\examples{
\dontrun{
# 1) Write exported functions from an installed package to a single file
dump_package_functions(
  out = "stats_dump.R",
  package = "stats",
  only_exported = TRUE,
  dest = "file"
)

# 2) Print all functions from a source tree to the console
dump_package_functions(
  dir = "/path/to/pkg",
  include_internal = TRUE,
  dest = "console"
)

# 3) Get the code blocks in-memory (named character vector)
blocks <- dump_package_functions(
  package = "utils",
  only_exported = TRUE,
  dest = "return"
)
names(blocks)
substr(blocks[[1]], 1, 80)
}

}
\seealso{
\code{\link[=functions_in_dir]{functions_in_dir()}}, \code{\link[=functions_in_file]{functions_in_file()}}
}
