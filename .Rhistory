install.packages("roxygen2")
install.packages("Roxygen2")
library(roxygen2)
library(fmckage)
?find_mode()
library(roxygen2)
library(devtools)
library(fmckage)
getwd()
library(devtools)
library(roxygen2)
library(fmckage)
install_github("FrancescoMonti-source/fmckage")
install_github("FrancescoMonti-source/fmckage")
library(devtools)
install_github("FrancescoMonti-source/fmckage")
library(fmckage)
??rm_accent()
??rm_accent
library(fmckage)
library(fmckage)
library(fmckage)
iris
find_mode(iris$Sepal.Length)
apply(iris,2,find_mode)
iris$Species %>% table
table(iris$Species)
library(fmckage)
library(fmckage)
rm_accent(iris)
rm_accent(iris) %>% class
class(rm_accent(iris))
rm_accent
cbind(acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ")
rm_accent(cbind(acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"))
rm_accent()
rm_accent
library(fmckage)
rm_accent(cbind(acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"), pattern = "à")
library(fmckage)
library(devtools)
install_github("FrancescoMonti-source/fmckage")
library(roxygen2)
library(devtools)
library(fmckage)
library(devtools)
library(roxygen2)
library(fmckage)
library(fmckage)
library(fmckage)
library(roxygen2)
roxygenise("fmckage")
roxygenise()
roxy_block()
roxy_block(fapply)
roxygen_template("mtcars")
library(roxygen2)
??roxygen
transparent
library(fmckage)
library(fmckage)
??t_col
library(fmckage)
library(roxygen2)
roxygenise()
roxygenise()
install.packages("passport")
install.packages("pipecleaner")
devtools::install_github("alistaire47/pipecleaner")
library(fmckage)
library(roxygen2)
roxygenize()
roxygenise()
roxygenize(clean=T)
library(fmckage)
roxygenize(clean=T)
roxygenize(clean=F)
??fuzzy_fill_na
??fuzzy_fill_na
??fuzzy_fill_na
library(fmckage)
??fuzzy_fill_na
library(fmckage)
library(fmckage)
??fuzzy_fill_na
library(fmckage)
??fuzzy_fill_na
library(fmckage)
library(lubridate)
# Load necessary libraries
library(fuzzyjoin)
library(dplyr)
# Create some synthetic data
df1 <- data.frame(
name = c("John", "Alice", "Bob", "Charlie"),
birthdate = as.Date(c("2000-01-01", "2000-02-02", "2000-03-03", "2000-04-04")),
city = c("New York", "Los Angeles", "Chicago", "San Francisco"),
id = c(NA, "123", "456", NA),
stringsAsFactors = FALSE
)
df2 <- data.frame(
name = c("John", "Alice", "Bob", "Charlie", "Charlie"),
birthdate = as.Date(c("2000-01-05", "2000-02-02", "2000-03-03", "2000-04-01", "2000-04-07")),
city = c("New York", "Los Angeles", "Chicago", "San Francisco", "San Francisco"),
id = c("789", "123", "456", "789", "012"),
stringsAsFactors = FALSE
)
# Define the matching columns and functions
match_cols <- c("name", "birthdate", "city")
match_fun_list <- list(`stringdist::stringdist`, `%within%`, `stringdist::stringdist`)
# Define the columns to fill
fill_cols <- c("id")
# Perform the fuzzy join and fill NA values
df_filled <- fuzzy_fill_na(df1, df2, match_cols, match_fun_list, fill_cols)
library(stringdist)
# Load necessary libraries
library(fuzzyjoin)
library(dplyr)
# Create some synthetic data
df1 <- data.frame(
name = c("John", "Alice", "Bob", "Charlie"),
birthdate = as.Date(c("2000-01-01", "2000-02-02", "2000-03-03", "2000-04-04")),
city = c("New York", "Los Angeles", "Chicago", "San Francisco"),
id = c(NA, "123", "456", NA),
stringsAsFactors = FALSE
)
df2 <- data.frame(
name = c("John", "Alice", "Bob", "Charlie", "Charlie"),
birthdate = as.Date(c("2000-01-05", "2000-02-02", "2000-03-03", "2000-04-01", "2000-04-07")),
city = c("New York", "Los Angeles", "Chicago", "San Francisco", "San Francisco"),
id = c("789", "123", "456", "789", "012"),
stringsAsFactors = FALSE
)
# Define the matching columns and functions
match_cols <- c("name", "birthdate", "city")
match_fun_list <- list(`stringdist::stringdist`, `%within%`, `stringdist::stringdist`)
# Define the columns to fill
fill_cols <- c("id")
# Perform the fuzzy join and fill NA values
df_filled <- fuzzy_fill_na(df1, df2, match_cols, match_fun_list, fill_cols)
# Load necessary libraries
library(fuzzyjoin)
library(dplyr)
# Create some synthetic data
df1 <- data.frame(
name = c("John", "Alice", "Bob", "Charlie"),
birthdate = as.Date(c("2000-01-01", "2000-02-02", "2000-03-03", "2000-04-04")),
city = c("New York", "Los Angeles", "Chicago", "San Francisco"),
id = c(NA, "123", "456", NA),
stringsAsFactors = FALSE
)
df2 <- data.frame(
name = c("John", "Alice", "Bob", "Charlie", "Charlie"),
birthdate = as.Date(c("2000-01-05", "2000-02-02", "2000-03-03", "2000-04-01", "2000-04-07")),
city = c("New York", "Los Angeles", "Chicago", "San Francisco", "San Francisco"),
id = c("789", "123", "456", "789", "012"),
stringsAsFactors = FALSE
)
# Define the matching columns and functions
match_cols <- c("name", "birthdate", "city")
match_fun_list <- list(`stringdist::stringdist`, `%within%`, `stringdist::stringdist`)
# Define the columns to fill
fill_cols <- c("id")
# Perform the fuzzy join and fill NA values
df_filled <- fuzzy_fill_na(df1, df2, match_cols, match_fun_list, fill_cols)
# Create some synthetic data
df1 <- data.frame(
name = c("John", "Alice", "Bob", "Charlie"),
birthdate = as.Date(c("2000-01-01", "2000-02-02", "2000-03-03", "2000-04-04")),
city = c("New York", "Los Angeles", "Chicago", "San Francisco"),
id = c(NA, "123", "456", NA),
stringsAsFactors = FALSE
)
df2 <- data.frame(
name = c("John", "Alice", "Bob", "Charlie", "Charlie"),
birthdate = as.Date(c("2000-01-05", "2000-02-02", "2000-03-03", "2000-04-01", "2000-04-07")),
city = c("New York", "Los Angeles", "Chicago", "San Francisco", "San Francisco"),
id = c("789", "123", "456", "789", "012"),
stringsAsFactors = FALSE
)
# Define the matching columns and functions
match_cols <- c("name", "birthdate", "city")
match_fun_list <- list(`stringdist::stringdist`, `%within%`, `stringdist::stringdist`)
# Define the columns to fill
fill_cols <- c("id")
# Perform the fuzzy join and fill NA values
df_filled <- fuzzy_fill_na(df1, df2, match_cols, match_fun_list, fill_cols)
fuzzy_fill_na <- function(df1, df2, match_cols, match_fun_list, fill_cols, replace_cols = NULL, keep_cols = NULL, stringdist_threshold = 2, stringdist_method = "jw") {
# Define the string distance matching function
match_stringdist <- function(x, y) {
stringdist::stringdist(x, y, method = stringdist_method) <= stringdist_threshold
}
# Replace stringdist::stringdist with match_stringdist in match_fun_list
match_fun_list <- lapply(match_fun_list, function(fun) {
if (fun == stringdist::stringdist) {
fun <- match_stringdist
}
return(fun)
})
# Perform the fuzzy join
join_result <- df1 %>%
fuzzyjoin::fuzzy_left_join(df2,
by = match_cols,
match_fun = match_fun_list)
# Update fill_cols to reflect the column names after the join
fill_cols <- paste0(fill_cols, ".x")
# Fill in missing values in df1 with values from df2
for (col in fill_cols) {
join_result <- join_result %>%
dplyr::mutate({{col}} := coalesce(.data[[col]], .data[[gsub(".x",".y", col)]]))
}
# Replace specified columns in df1 with their counterparts in df2
if (!is.null(replace_cols)) {
replace_cols <- paste0(replace_cols, ".x")
for (col in replace_cols) {
join_result <- join_result %>%
dplyr::mutate({{col}} := .data[[gsub(".x",".y", col)]])
}
}
# Keep specified columns from df2
if (!is.null(keep_cols)) {
keep_cols <- paste0(keep_cols, ".y")
} else {
keep_cols <- character(0)
}
# Keep only the original columns from df1 and specified columns from df2
df_filled <- join_result %>%
dplyr::select(c(dplyr::ends_with(".x"), keep_cols)) %>%
dplyr::rename_with(~ gsub("\\.x$", "", .x), -all_of(keep_cols)) %>%
dplyr::rename_with(~ paste0(gsub("\\.y$", "", .x), "_df2"), all_of(keep_cols))
return(df_filled)
}
library(fmckage)
library(fmckage)
library(tidyverse)
devtools::document()
devtools::document()
library(fmckage)
??fuzzy_fill_na
library(fmckage)
devtools::document()
library(fmckage)
devtools::document()
library(fmckage)
??rm_accent
devtools::document()
library(fmckage)
library(fmckage)
??getSeason
??getSeason
library(fmckage)
??getSeason
devtools::document()
devtools::document()
library(fmckage)
devtools::document()
library(fmckage)
devtools::document()
devtools::document()
devtools::document()
library(fmckage)
library(fmckage)
library(fmckage)
document()
roxygenise()
library(roxygen2)
roxygenise()
library(fmckage)
library(fmckage)
library(fmckage)
library(fmckage)
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
document()
roxygenise()
etude <- data.frame(
age = c(24, 45, 67, 38, 55, 28, 78, 63, 42, 55),
sex = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F")
)
etude <- data.frame(
age = c(24, 45, 67, 38, 55, 28, 78, 63, 42, 55),
sex = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F")
)
plot_age_pyramid(etude, age_var = "age", sex_var = "sex", breaks = seq(0, 100, 10),
fill = "lightblue", color = "black")
etude <- data.frame(
age = c(24, 45, 67, 38, 55, 28, 78, 63, 42, 55),
sex = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F")
)
library(tidyverse)
etude <- data.frame(
age = c(24, 45, 67, 38, 55, 28, 78, 63, 42, 55),
sex = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F")
)
plot_age_pyramid(etude, age_var = "age", sex_var = "sex", breaks = seq(0, 100, 10),
fill = "lightblue", color = "black")
etude <- data.frame(
age = c(24, 45, 67, 38, 55, 28, 78, 63, 42, 55),
sex = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F")
)
etude
plot_age_pyramid(etude, age_var = "age", sex_var = "sex", breaks = seq(0, 100, 10),
fill = "lightblue", color = "black")
plot_age_pyramid(etude, age_var = "age", sex_var = "sex", breaks = seq(0, 100, 10))
roxygenise()
library(fmckage)
library(fmckage)
library(roxygen2)
roxygenise()
library(fmckage)
library(fmckage)
